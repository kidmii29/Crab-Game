# Train Crabs — 2D Game (Repository Scaffold)

This document contains a ready-to-paste GitHub repo scaffold for a simple 2D browser game called **Train Crabs**. In the game, crabs board trains, and the player earns **coins**; the amount of coins gained is influenced by train capacity.

---

## File tree

```
train-crabs-game/
├── README.md
├── LICENSE
├── .gitignore
└── src/
    ├── index.html
    ├── style.css
    └── game.js
```

---

## README.md

```md
# Train Crabs

A small 2D browser game prototype where crabs board trains and generate coins. Coins gained scale with the number of crabs on board and with the train's capacity (so upgrading capacity increases earnings potential).

This repository is a scaffold you can paste into a GitHub repository and run locally (open `src/index.html`).

### Features
- HTML5 Canvas 2D game (no build step)
- Trains move horizontally and accept crabs up to capacity
- Crabs walk toward the nearest train and board if there's room
- Coins accumulate over time; coins/sec scales with passengers and train capacity
- UI controls to spawn crabs/trains and upgrade capacity

### How coins are calculated
Each train has:
- `baseCoinRate` (coins per second per passenger)
- `capacity` (max passengers)

If a train has `p` passengers, coins gained per second from that train are:

```

coins/sec = baseCoinRate * p * (1 + capacity / 10)

```

The factor `(1 + capacity / 10)` makes larger-capacity trains more valuable (you can change this formula in `game.js`).

### Usage
1. Clone or create a new repo and paste files.
2. Open `src/index.html` in a modern browser.
3. Use the UI in the top-left to spawn crabs and trains and upgrade capacity.

### License
MIT
```

````

---

## LICENSE (MIT)

```text
MIT License

Copyright (c) 2025

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
````

---

## .gitignore

```
.DS_Store
node_modules/
.vscode/
*.log
```

---

## src/index.html

```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Train Crabs</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div id="ui">
    <h1>Train Crabs</h1>
    <div class="row">
      <button id="spawnCrab">Spawn Crab</button>
      <button id="spawnTrain">Spawn Train</button>
      <button id="upgradeTrain">Upgrade Selected Train</button>
    </div>
    <div class="row">
      <label>Selected train: <span id="selectedTrain">None</span></label>
    </div>
    <div class="row">
      <label>Coins: <span id="coins">0</span></label>
    </div>
    <div class="row small">Click a train to select it.</div>
  </div>
  <canvas id="gameCanvas" width="900" height="600"></canvas>
  <script src="game.js"></script>
</body>
</html>
```

---

## src/style.css

```css
body { margin: 0; font-family: system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; }
#ui { position: absolute; left: 12px; top: 12px; background: rgba(255,255,255,0.9); padding: 10px; border-radius: 8px; box-shadow: 0 6px 18px rgba(0,0,0,0.12); z-index: 10; }
#ui h1 { margin: 0 0 8px 0; font-size: 16px; }
.row { margin: 6px 0; }
.row.small { font-size: 12px; color: #444; }
button { margin-right: 6px; }
canvas { display:block; background: linear-gradient(#9dd3ff, #6fb3ff); }
```

---

## src/game.js

```javascript
// Train Crabs - Simple 2D game prototype
// Open src/index.html in a browser to play.

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

let lastTime = performance.now();
let coins = 0;

// Game objects
const crabs = [];
const trains = [];
let selectedTrainId = null;

let nextCrabId = 1;
let nextTrainId = 1;

// Utility
function rand(min, max) { return Math.random() * (max - min) + min; }

class Crab {
  constructor(x, y) {
    this.id = nextCrabId++;
    this.x = x; this.y = y;
    this.speed = 40 + Math.random()*20; // px/sec
    this.targetTrain = null; // train id
    this.onTrain = null; // train id if boarded
  }

  findNearestTrain() {
    let best = null, bestDist = Infinity;
    for (const t of trains) {
      if (t.passengers.length >= t.capacity) continue; // can't board
      const dx = t.x - this.x;
      const dy = t.y - this.y;
      const d = Math.hypot(dx, dy);
      if (d < bestDist) { bestDist = d; best = t; }
    }
    this.targetTrain = best ? best.id : null;
  }

  update(dt) {
    if (this.onTrain) return; // already boarded
    if (!this.targetTrain || !trains.find(t=>t.id===this.targetTrain) ) this.findNearestTrain();
    const train = trains.find(t => t.id === this.targetTrain);
    if (!train) { // wander
      this.x += Math.cos(this.id) * this.speed * dt * 0.2;
      this.y += Math.sin(this.id) * this.speed * dt * 0.2;
      return;
    }

    // move toward train
    const dx = train.x - this.x;
    const dy = train.y - this.y;
    const d = Math.hypot(dx, dy);
    if (d < 18 && train.passengers.length < train.capacity) {
      // board train
      train.board(this);
      this.onTrain = train.id;
      return;
    }
    if (d > 0.001) {
      this.x += (dx/d) * this.speed * dt;
      this.y += (dy/d) * this.speed * dt;
    }
  }

  draw(ctx) {
    ctx.save();
    ctx.translate(this.x, this.y);
    // crab body
    ctx.fillStyle = '#FF7F50';
    ctx.beginPath();
    ctx.arc(0, 0, 8, 0, Math.PI*2);
    ctx.fill();
    // eyes
    ctx.fillStyle = 'white';
    ctx.fillRect(-4, -6, 3, 3);
    ctx.fillRect(2, -6, 3, 3);
    ctx.restore();
  }
}

class Train {
  constructor(x, y) {
    this.id = nextTrainId++;
    this.x = x; this.y = y;
    this.w = 120; this.h = 34;
    this.speed = 40 + Math.random()*30; // pixels/sec
    this.direction = Math.random()<0.5 ? 1 : -1;
    this.capacity = 3; // default capacity
    this.passengers = [];
    this.baseCoinRate = 0.5; // coins per second per passenger
  }

  board(crab) {
    if (this.passengers.length >= this.capacity) return false;
    this.passengers.push(crab.id);
    crab.onTrain = this.id;
    // snap crab to train for visuals
    return true;
  }

  disembark(crabId) {
    const i = this.passengers.indexOf(crabId);
    if (i >= 0) this.passengers.splice(i,1);
  }

  upgradeCapacity() {
    this.capacity += 1;
  }

  update(dt) {
    this.x += this.speed * this.direction * dt;
    // bounce at edges
    if (this.x < 60) { this.x = 60; this.direction *= -1; }
    if (this.x > canvas.width - 60) { this.x = canvas.width - 60; this.direction *= -1; }

    // small chance to drop a passenger (simulates stops)
    if (Math.random() < 0.0005) {
      if (this.passengers.length > 0) {
        const pid = this.passengers.shift();
        const crab = crabs.find(c=>c.id===pid);
        if (crab) {
          crab.onTrain = null;
          crab.x = this.x + rand(-40,40);
          crab.y = this.y + 50;
        }
      }
    }
  }

  coinsPerSecond() {
    const p = this.passengers.length;
    return this.baseCoinRate * p * (1 + this.capacity / 10);
  }

  draw(ctx, isSelected) {
    ctx.save();
    ctx.translate(this.x, this.y);
    // body
    ctx.fillStyle = isSelected ? '#FFD54F' : '#555555';
    ctx.fillRect(-this.w/2, -this.h/2, this.w, this.h);
    // windows for passengers
    for (let i=0;i<this.capacity;i++) {
      const wx = -this.w/2 + 12 + i*( (this.w-24)/Math.max(1,this.capacity) );
      ctx.fillStyle = i < this.passengers.length ? '#FF7F50' : '#222';
      ctx.fillRect(wx, -10, 20, 20);
    }
    // capacity text
    ctx.fillStyle = 'white';
    ctx.font = '12px sans-serif';
    ctx.fillText(`cap:${this.capacity}`, -this.w/2 + 6, -this.h/2 - 6);
    ctx.restore();
  }
}

// Input handlers
canvas.addEventListener('click', (e) => {
  const rect = canvas.getBoundingClientRect();
  const mx = e.clientX - rect.left;
  const my = e.clientY - rect.top;
  // check trains
  let clicked = false;
  for (const t of trains) {
    if (mx > t.x - t.w/2 && mx < t.x + t.w/2 && my > t.y - t.h/2 && my < t.y + t.h/2) {
      selectedTrainId = t.id;
      clicked = true; break;
    }
  }
  if (!clicked) selectedTrainId = null;
  document.getElementById('selectedTrain').innerText = selectedTrainId ? selectedTrainId : 'None';
});

// UI
document.getElementById('spawnCrab').addEventListener('click', ()=>{
  const x = rand(40, canvas.width-40);
  const y = canvas.height - 40;
  crabs.push(new Crab(x,y));
});

document.getElementById('spawnTrain').addEventListener('click', ()=>{
  const x = rand(100, canvas.width-100);
  const y = rand(120, canvas.height/2);
  trains.push(new Train(x,y));
});

document.getElementById('upgradeTrain').addEventListener('click', ()=>{
  if (!selectedTrainId) return;
  const t = trains.find(tr=>tr.id === selectedTrainId);
  if (t) t.upgradeCapacity();
});

// Game loop
function update(dt) {
  // update trains
  for (const t of trains) t.update(dt);
  // update crabs
  for (const c of crabs) c.update(dt);

  // coin accumulation
  let deltaCoins = 0;
  for (const t of trains) deltaCoins += t.coinsPerSecond() * dt;
  coins += deltaCoins;
}

function draw() {
  ctx.clearRect(0,0,canvas.width,canvas.height);
  // ground
  ctx.fillStyle = '#6ea86b';
  ctx.fillRect(0, canvas.height-40, canvas.width, 40);

  // draw trains
  for (const t of trains) t.draw(ctx, t.id === selectedTrainId);

  // draw crabs
  for (const c of crabs) c.draw(ctx);

  // UI overlay for coins
  document.getElementById('coins').innerText = Math.floor(coins);
}

function loop(now) {
  const dt = Math.min(0.05, (now - lastTime)/1000);
  lastTime = now;
  update(dt);
  draw();
  requestAnimationFrame(loop);
}

// seed
for (let i=0;i<6;i++) crabs.push(new Crab(rand(50,850), 540));
for (let i=0;i<2;i++) trains.push(new Train(rand(150,750), rand(200,360)));

requestAnimationFrame(loop);
```

---

### Notes & next steps

* This is a single-player, local prototype. To publish on GitHub: create a new repo and paste these files into the structure above.
* You can extend: add sprite images, sound, more train behaviors (stops, town stations), crab AI, levels, mobile controls, and persistence.

Enjoy! If you want, I can:

* convert this to a React + Vite project,
* add sprite assets and sample images, or
* generate a ZIP you can download.
